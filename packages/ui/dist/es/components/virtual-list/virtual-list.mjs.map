{"version":3,"file":"virtual-list.mjs","sources":["../../../../src/components/virtual-list/virtual-list.tsx"],"sourcesContent":["import classNames from 'classnames';\nimport React, { useEffect, useRef, useState, useMemo, useCallback } from 'react';\nimport './style.scss';\nimport VirtualListItem from './virtual-list-item';\nimport {\n    estimatedHeight,\n    getItemMetaData,\n    getRangeToRender,\n    scrollToOffset,\n    getOffset,\n    getClientSize,\n    getScrollSize,\n    throttle,\n} from './util';\nimport useIntersectionObserver from './useIntersectionObserver';\n\nexport interface VirtualListProps {\n    data: any[]; // 列表数据\n    uniqueKey?: string; // 唯一标识\n    pageMode?: boolean; // 是否开启整页滚动模式\n    visibleHeight?: number; // 可视区域高度\n    pageModeVisibleSize?: number; // 整页滚动模式下，显示的size数\n    itemEstimatedHeight?: number; // 预估item高度\n    renderItem: (item: object, index: number, list: any[]) => React.ReactNode; // 渲染每一项的函数\n    wrapperClass?: string; // 容器类名\n    wrapperStyle?: React.CSSProperties; // 容器样式\n    bufferSize?: number; // 缓冲区域大小\n    onLoadMore?: () => Promise<unknown>; // 加载更多数据\n    hasMore?: boolean; // 是否还有更多数据\n    renderLoadMore?: (loading: boolean, hasMore: boolean) => React.ReactNode; // 渲染加载更多\n    isShowLoadMore?: boolean; // 是否显示加载更多\n    itemWrapperClass?: string; // item容器类名\n    topThreshold?: number; // 顶部阈值\n    onScrollTop?: () => void; // 滚动到顶部\n\n    onScroll?: (evt: Event) => void; // 滚动事件\n    presetOffset?: number; // 预设的滚动偏移量\n}\n\nexport interface measuredDataProps {\n    measuredDataMap: {\n        [key: number]: {\n            offset: number; // 当前项距离顶部的距离\n            height: number; // 当前项的高度\n        };\n    };\n    lastMeasuredItemIndex: number; // 最后一个已经缓存过高度的索引\n}\n\nexport const VirtualList: React.FC<VirtualListProps> = (props) => {\n    const {\n        wrapperClass = '',\n        wrapperStyle = {},\n        uniqueKey,\n        data: sourceList,\n        itemEstimatedHeight = 50,\n        pageMode = false,\n        visibleHeight,\n        renderItem,\n        onLoadMore,\n        hasMore = false,\n        renderLoadMore,\n        isShowLoadMore = true,\n        itemWrapperClass = '',\n        topThreshold = 0,\n        onScrollTop,\n        onScroll,\n    } = props;\n    const [scrollOffset, setScrollOffset] = useState(0); // 滚动偏移量\n    const containerRef = useRef<HTMLDivElement>(null); // 用于获取滚动容器的ref\n    const loadMoreRef = useRef<HTMLDivElement>(null); // 用于获取loadMore的ref\n    const [loading, setLoading] = useState(false); // 加载状态\n    // const [, setState] = useState({}); // 强制更新组件\n    // 计算可视区域高度\n    const [measuredData, setMeasuredData] = useState<measuredDataProps>({\n        measuredDataMap: {},\n        lastMeasuredItemIndex: -1,\n    });\n\n    // measuredData初始化\n    useEffect(() => {\n        setMeasuredData((prevData) => {\n            const measuredDataMap = { ...prevData.measuredDataMap };\n            let lastMeasuredItemIndex = prevData.lastMeasuredItemIndex;\n            for (let i = 0; i < sourceList.length; i++) {\n                if (measuredDataMap[i] === undefined) {\n                    const lastMeasuredItem = measuredDataMap[lastMeasuredItemIndex] || {};\n                    const offset =\n                        (lastMeasuredItem?.offset || 0) + (lastMeasuredItem?.height || 0);\n                    measuredDataMap[i] = { height: itemEstimatedHeight, offset };\n                    lastMeasuredItemIndex = i;\n                }\n            }\n            return {\n                measuredDataMap,\n                lastMeasuredItemIndex,\n            };\n        });\n    }, [sourceList, itemEstimatedHeight]);\n\n    // 监听滚动事件\n    useEffect(() => {\n        const container = containerRef.current;\n        if (!container) return;\n\n        // 使用节流函数包装handleScroll，200ms内只执行一次\n        const handleScroll = throttle((evt) => {\n            const offset = getOffset(props, containerRef);\n            // console.log('scroll', evt, offset, +new Date());\n            setScrollOffset(offset);\n            onScroll?.(evt);\n        }, 50);\n\n        if (props.presetOffset) {\n            setTimeout(() => {\n                scrollToOffset(props, containerRef); // 预设滚动偏移量\n            }, 100);\n        }\n\n        if (pageMode) {\n            document.addEventListener('scroll', handleScroll);\n            return () => document.removeEventListener('scroll', handleScroll);\n        } else {\n            container.addEventListener('scroll', handleScroll);\n            return () => container.removeEventListener('scroll', handleScroll);\n        }\n    }, [pageMode]);\n\n    useEffect(() => {\n        if (scrollOffset - topThreshold <= 0 && onScrollTop) {\n            onScrollTop();\n        }\n    }, [scrollOffset]);\n\n    // 监听loadMore的可见性\n    const handleLoadMore = useCallback(\n        (isVisible: boolean) => {\n            if (isVisible && hasMore && !loading) {\n                setLoading(true);\n                onLoadMore?.().finally(() => {\n                    setLoading(false);\n                });\n            }\n        },\n        [hasMore, onLoadMore, loading],\n    );\n    // 监听loadMore的可见性\n    useIntersectionObserver([loadMoreRef.current], handleLoadMore, null, {\n        root: null,\n        rootMargin: '0px',\n        threshold: 1.0,\n    });\n\n    // 当item尺寸变化时，更新滚动偏移量\n    const sizeChangeHandle = (index: number, domNode: any) => {\n        const height = domNode?.offsetHeight || 0; // 获取domNode的高度\n        setMeasuredData((prevData) => {\n            const measuredDataMap = { ...prevData.measuredDataMap };\n            const { lastMeasuredItemIndex } = prevData;\n            // console.log('sizeChangeHandle', index, height, prevData);\n            const itemMetaData = measuredDataMap[index];\n            if (itemMetaData.height === height) {\n                return prevData;\n            }\n            itemMetaData.height = height;\n            let offset = itemMetaData.offset + itemMetaData.height;\n            // 重新计算从索引 0 到当前项的所有偏移量\n            for (let i = index + 1; i <= lastMeasuredItemIndex; i++) {\n                const item = measuredDataMap[i];\n                measuredDataMap[i] = {\n                    ...item,\n                    offset: offset,\n                };\n                offset += item.height;\n            }\n            return {\n                measuredDataMap,\n                lastMeasuredItemIndex,\n            };\n        });\n\n        // const { measuredDataMap, lastMeasuredItemIndex } = measuredData;\n        // const itemMetaData = measuredDataMap[index];\n        // if (itemMetaData.height === height) {\n        //     return;\n        // }\n        // itemMetaData.height = height; // 更新元数据信息: 真实高度\n        // let offset = itemMetaData.offset || 0;\n        // for (let i = index; i <= lastMeasuredItemIndex; i++) {\n        //     const item = measuredDataMap[i];\n        //     offset += item.height;\n        //     measuredDataMap[i] = { ...item, offset: offset };\n        // }\n        // setMeasuredData((prev) => {\n        //     return {\n        //         ...prev,\n        //         measuredDataMap: measuredDataMap,\n        //     };\n        // });\n        // 强制更新组件\n        // setState({});\n    };\n\n    // 获取当前可视区内的项\n    const getCurrentChildren = useCallback(() => {\n        const [startIndex, endIndex] = getRangeToRender(props, scrollOffset, measuredData);\n        const items = [];\n        for (let index = startIndex; index <= endIndex; index++) {\n            // const item = getItemMetaData(props, index); // 获取当前项的元数据\n            // const itemStyle = {\n            //     height: item.size,\n            //     height: item.height,\n            //     width: '100%',\n            // };\n            const itemKey = uniqueKey ? sourceList[index][uniqueKey] : index;\n            items.push(\n                <VirtualListItem\n                    key={itemKey}\n                    itemKey={itemKey}\n                    index={index}\n                    // style={itemStyle}\n                    itemWrapperClass={itemWrapperClass}\n                    onSizeChange={sizeChangeHandle}\n                >\n                    {renderItem(sourceList[index], index, sourceList)}\n                </VirtualListItem>,\n            );\n        }\n        return items;\n    }, [scrollOffset, renderItem]);\n\n    // 计算总高度\n    const totalHeight = useMemo(() => {\n        // return estimatedHeight(itemEstimatedHeight, sourceList.length, measuredData);\n        const { lastMeasuredItemIndex, measuredDataMap } = measuredData;\n        if (lastMeasuredItemIndex >= 0) {\n            const lastMeasuredItem = measuredDataMap[lastMeasuredItemIndex];\n            return lastMeasuredItem.offset + lastMeasuredItem.height;\n        } else {\n            return 0;\n        }\n    }, [measuredData]);\n\n    /**\n     * 容器样式处理\n     */\n    const wrapperClassName = useMemo(() => {\n        return classNames('verney-virtual-list__wrapper', wrapperClass);\n    }, [wrapperClass]);\n    const wrapperStyleMemo: React.CSSProperties = useMemo(() => {\n        return {\n            ...wrapperStyle,\n            height: pageMode ? 'auto' : visibleHeight,\n            overflow: pageMode ? 'visible' : 'auto',\n            position: 'relative',\n        };\n    }, [wrapperStyle, visibleHeight, pageMode]);\n    const contentContainerStyle: React.CSSProperties = useMemo(() => {\n        let loadMoreheight = 0;\n        if (loadMoreRef) {\n            loadMoreheight = loadMoreRef?.current?.clientHeight || 0;\n        }\n        return {\n            height: totalHeight + loadMoreheight,\n        };\n    }, [totalHeight]);\n    const translateContainerStyle: React.CSSProperties = useMemo(() => {\n        const [startIndex] = getRangeToRender(props, scrollOffset, measuredData);\n        const startItem = getItemMetaData(measuredData, startIndex);\n        // console.log('startItem', startItem, startIndex);\n        return {\n            transform: `translateY(${startItem.offset}px) translateZ(0)`,\n        };\n    }, [scrollOffset, measuredData]);\n\n    return (\n        <div ref={containerRef} className={wrapperClassName} style={wrapperStyleMemo}>\n            <div className=\"verney-virtual-content\" style={contentContainerStyle} role=\"group\">\n                <div style={translateContainerStyle} className=\"verney-virtual-translate\">\n                    {getCurrentChildren()}\n                    {sourceList.length ? (\n                        <div ref={loadMoreRef} className=\"verney-virtual-loadmore\">\n                            {renderLoadMore ? (\n                                renderLoadMore(loading, hasMore)\n                            ) : isShowLoadMore ? (\n                                <div className=\"verney-virtual-loadmore__text\">\n                                    {loading ? '加载中...' : hasMore ? '加载更多' : '没有更多了~'}\n                                </div>\n                            ) : null}\n                        </div>\n                    ) : null}\n                </div>\n            </div>\n        </div>\n    );\n};\n\n/**\n * 加载图片\n * 加载更多增加loader组件传参\n * 缓存优化，滚动优化\n * pageMode模式\n * 测试用例，文档用例，发版\n * 项目中引用\n * 博客\n */\n"],"names":["jsx"],"mappings":"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"}