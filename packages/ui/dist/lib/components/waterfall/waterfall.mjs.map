{"version":3,"file":"waterfall.mjs","sources":["../../../../src/components/waterfall/waterfall.tsx"],"sourcesContent":["import classNames from 'classnames';\nimport React, { useEffect, useRef, useState, useCallback } from 'react';\nimport { useInView } from 'react-intersection-observer';\nimport './style.scss';\n\nexport interface WaterfallProps {\n    /**\n     * 数据列表\n     */\n    dataSource: any[];\n    /**\n     * 列数\n     */\n    columns?: number;\n    /**\n     * 列间距\n     */\n    gutter?: number;\n    /**\n     * 默认item高度\n     */\n    defaultItemHeight?: number;\n    /**\n     * 是否启用动画\n     */\n    enableAnimation?: boolean;\n    /**\n     * 动画持续时间(ms)\n     */\n    animationDuration?: number;\n    /**\n     * 动画缓动函数\n     */\n    animationEasing?: string;\n    /**\n     * 自定义渲染项\n     */\n    renderItem?: (item: any, index: number) => React.ReactNode;\n    /**\n     * 容器类名\n     */\n    className?: string;\n    /**\n     * 容器样式\n     */\n    style?: React.CSSProperties;\n    /**\n     * 是否正在加载更多\n     */\n    loading?: boolean;\n    /**\n     * 是否还有更多数据\n     */\n    hasMore?: boolean;\n    /**\n     * 加载更多的回调\n     */\n    onLoadMore?: () => void;\n    /**\n     * 自定义加载中显示内容\n     */\n    loadingComponent?: React.ReactNode;\n    /**\n     * 自定义没有更多数据显示内容\n     */\n    noMoreComponent?: React.ReactNode;\n}\n\nexport const Waterfall: React.FC<WaterfallProps> = ({\n    dataSource = [],\n    columns = 2,\n    gutter = 16,\n    defaultItemHeight = 200,\n    enableAnimation = true,\n    animationDuration = 300,\n    animationEasing = 'ease-out',\n    renderItem,\n    className,\n    style,\n    loading = false,\n    hasMore = true,\n    onLoadMore,\n    loadingComponent = '加载中...',\n    noMoreComponent = '没有更多了',\n}) => {\n    const containerRef = useRef<HTMLDivElement>(null);\n    const [columnHeights, setColumnHeights] = useState<number[]>([]);\n    const [renderedItems, setRenderedItems] = useState<React.ReactNode[][]>([]);\n    const [pendingData, setPendingData] = useState<any[]>([]);\n    const heightsMapRef = useRef<Map<number, number>>(new Map());\n    const processingRef = useRef<boolean>(false);\n    const loadingRef = useRef(loading);\n    const loadMoreTimeoutRef = useRef<ReturnType<typeof setTimeout> | null>(\n        null\n    );\n    const renderedIndexesRef = useRef<Set<number>>(new Set());\n\n    // 任务队列管理\n    const taskQueueRef = useRef<{\n        tasks: (() => Promise<void>)[];\n        isProcessing: boolean;\n    }>({\n        tasks: [],\n        isProcessing: false,\n    });\n\n    // 添加任务到队列\n    const addTask = useCallback((task: () => Promise<void>) => {\n        taskQueueRef.current.tasks.push(task);\n\n        if (!taskQueueRef.current.isProcessing) {\n            processNextTask();\n        }\n    }, []);\n\n    // 处理下一个任务\n    const processNextTask = useCallback(async () => {\n        if (\n            taskQueueRef.current.isProcessing ||\n            taskQueueRef.current.tasks.length === 0\n        ) {\n            return;\n        }\n\n        taskQueueRef.current.isProcessing = true;\n        const currentTask = taskQueueRef.current.tasks[0];\n\n        try {\n            await currentTask();\n            taskQueueRef.current.tasks.shift(); // 移除已完成的任务\n            taskQueueRef.current.isProcessing = false;\n\n            // 如果还有任务，继续处理\n            if (taskQueueRef.current.tasks.length > 0) {\n                processNextTask();\n            }\n        } catch (error) {\n            console.error('Task execution failed:', error);\n            taskQueueRef.current.isProcessing = false;\n        }\n    }, []);\n\n    // 创建数据处理任务\n    const createDataProcessTask = useCallback((data: any[]) => {\n        return async () => {\n            // 只处理新增的数据\n            const newData = data.filter(\n                (_, index) => !renderedIndexesRef.current.has(index)\n            );\n\n            if (newData.length > 0) {\n                setPendingData((prev) => [...prev, ...newData]);\n            }\n\n            // 等待所有数据渲染完成\n            return new Promise<void>((resolve) => {\n                const checkComplete = () => {\n                    const allItemsProcessed =\n                        renderedIndexesRef.current.size === data.length;\n                    if (allItemsProcessed) {\n                        resolve();\n                    } else {\n                        setTimeout(checkComplete, 100);\n                    }\n                };\n                checkComplete();\n            });\n        };\n    }, []);\n\n    // 防抖处理的onLoadMore\n    const debouncedLoadMore = useCallback(() => {\n        if (loadMoreTimeoutRef.current) {\n            clearTimeout(loadMoreTimeoutRef.current);\n        }\n\n        loadMoreTimeoutRef.current = setTimeout(() => {\n            if (\n                !loadingRef.current &&\n                hasMore &&\n                onLoadMore &&\n                !taskQueueRef.current.isProcessing\n            ) {\n                // 创建加载更多任务\n                const loadMoreTask = async () => {\n                    loadingRef.current = true;\n                    await onLoadMore();\n                };\n                addTask(loadMoreTask);\n            }\n        }, 200);\n    }, [hasMore, onLoadMore, addTask]);\n\n    // 初始化\n    useEffect(() => {\n        // 只在列数改变时重置布局\n        if (columnHeights.length !== columns) {\n            setColumnHeights(new Array(columns).fill(0));\n            setRenderedItems(new Array(columns).fill(0).map(() => []));\n            renderedIndexesRef.current.clear();\n            heightsMapRef.current.clear();\n        }\n\n        // 数据更新时，只处理新数据\n        const processTask = createDataProcessTask(dataSource);\n        addTask(processTask);\n    }, [\n        columns,\n        dataSource,\n        createDataProcessTask,\n        addTask,\n        columnHeights.length,\n    ]);\n\n    // 更新loading状态\n    useEffect(() => {\n        loadingRef.current = loading;\n    }, [loading]);\n\n    /**\n     * 加载更多处理\n     */\n    // 使用 useInView 监听加载更多的触发器元素\n    const { ref: loadMoreRef, inView: loadMoreInView } = useInView({\n        threshold: 1, // 改为1，表示完全可见时才触发\n        rootMargin: '0px', // 改为0px，不再提前触发\n    });\n    // 处理加载更多\n    useEffect(() => {\n        console.log('loadMoreInView', loadMoreInView);\n        if (loadMoreInView) {\n            debouncedLoadMore();\n        }\n        return () => {\n            if (loadMoreTimeoutRef.current) {\n                clearTimeout(loadMoreTimeoutRef.current);\n            }\n        };\n    }, [loadMoreInView, debouncedLoadMore]);\n\n    // 计算每个item应该放在哪一列\n    const getMinHeightColumn = useCallback(() => {\n        const minHeight = Math.min(...columnHeights);\n        return columnHeights.indexOf(minHeight);\n    }, [columnHeights]);\n\n    // 更新列高度并处理下一个数据\n    const updateColumnHeight = useCallback(\n        (index: number, height: number, columnIndex: number) => {\n            if (heightsMapRef.current.get(index) === height) return;\n\n            const oldHeight = heightsMapRef.current.get(index) || 0;\n            heightsMapRef.current.set(index, height);\n            renderedIndexesRef.current.add(index);\n\n            setColumnHeights((prev) => {\n                const newHeights = [...prev];\n                newHeights[columnIndex] =\n                    newHeights[columnIndex] - oldHeight + height;\n                return newHeights;\n            });\n\n            processingRef.current = false;\n        },\n        []\n    );\n\n    // 处理单个数据的方法\n    const processNextItem = useCallback(() => {\n        if (processingRef.current || pendingData.length === 0) return;\n\n        processingRef.current = true;\n        const columnIndex = getMinHeightColumn();\n\n        if (columnIndex > -1) {\n            const [nextItem, ...rest] = pendingData;\n            const currentIndex = dataSource.indexOf(nextItem);\n\n            // 如果这个数据已经渲染过，跳过\n            if (renderedIndexesRef.current.has(currentIndex)) {\n                setPendingData(rest);\n                processingRef.current = false;\n                return;\n            }\n\n            setPendingData(rest);\n            setRenderedItems((prev) => {\n                const newItems = [...prev];\n                newItems[columnIndex] = [\n                    ...newItems[columnIndex],\n                    <WaterfallItem\n                        key={currentIndex}\n                        item={nextItem}\n                        index={currentIndex}\n                        columnIndex={columnIndex}\n                        gutter={gutter}\n                        defaultItemHeight={defaultItemHeight}\n                        enableAnimation={enableAnimation}\n                        animationDuration={animationDuration}\n                        animationEasing={animationEasing}\n                        renderItem={renderItem}\n                        updateColumnHeight={updateColumnHeight}\n                    />,\n                ];\n                return newItems;\n            });\n        }\n    }, [\n        pendingData,\n        columnHeights,\n        gutter,\n        renderItem,\n        dataSource,\n        getMinHeightColumn,\n        defaultItemHeight,\n        updateColumnHeight,\n        enableAnimation,\n        animationDuration,\n        animationEasing,\n    ]);\n\n    // 监听状态变化，处理下一个数据\n    useEffect(() => {\n        if (!processingRef.current) {\n            processNextItem();\n        }\n    }, [processNextItem, pendingData, processingRef.current]);\n\n    return (\n        <div\n            ref={containerRef}\n            className={classNames('verney-waterfall', className)}\n            style={{\n                display: 'grid',\n                gridTemplateColumns: `repeat(${columns}, 1fr)`,\n                gap: gutter,\n                ...style,\n            }}\n        >\n            {renderedItems.map((column, index) => (\n                <div key={index} className=\"verney-waterfall-column\">\n                    {column}\n                </div>\n            ))}\n\n            {/* 加载更多触发器 */}\n            <div\n                ref={loadMoreRef}\n                className=\"verney-waterfall-loader\"\n                style={{\n                    width: '100%',\n                    pointerEvents: 'none',\n                }}\n            >\n                {loading ? loadingComponent : !hasMore && noMoreComponent}\n            </div>\n        </div>\n    );\n};\n\nWaterfall.displayName = 'Waterfall';\n\n// 渲染单个item\nconst WaterfallItem = React.memo(({\n    item,\n    index,\n    columnIndex,\n    gutter,\n    defaultItemHeight,\n    enableAnimation = true,\n    animationDuration = 300,\n    animationEasing = 'ease-out',\n    updateColumnHeight,\n    renderItem,\n}: {\n    item: any;\n    index: number;\n    columnIndex: number;\n    gutter: number;\n    defaultItemHeight: number;\n    enableAnimation?: boolean;\n    animationDuration?: number;\n    animationEasing?: string;\n    updateColumnHeight: (\n        index: number,\n        height: number,\n        columnIndex: number\n    ) => void;\n    renderItem?: (item: any, index: number) => React.ReactNode;\n}) => {\n    const itemRef = useRef<HTMLDivElement>(null);\n    const [isLoaded, setIsLoaded] = useState(false);\n    const [isVisible, setIsVisible] = useState(false);\n    const timeoutRef = useRef<ReturnType<typeof setTimeout> | null>(null);\n    const hasUpdatedRef = useRef<boolean>(false);\n\n    // 更新高度的函数\n    const updateHeight = useCallback(() => {\n        if (!hasUpdatedRef.current && itemRef.current) {\n            hasUpdatedRef.current = true;\n            const height = itemRef.current.offsetHeight;\n            if (height > 0) {\n                updateColumnHeight(index, height, columnIndex);\n                // 添加一个小延迟，让元素在高度更新后再显示\n                if (enableAnimation) {\n                    setTimeout(() => setIsVisible(true), 50);\n                } else {\n                    setIsVisible(true);\n                }\n            }\n        }\n    }, [index, columnIndex, updateColumnHeight, enableAnimation]);\n\n    // 监听图片加载\n    useEffect(() => {\n        if (!itemRef.current) return;\n\n        const images = itemRef.current.getElementsByTagName('img');\n\n        // 设置 200ms 后的默认高度更新\n        timeoutRef.current = setTimeout(() => {\n            if (!hasUpdatedRef.current && itemRef.current) {\n                updateHeight();\n            }\n        }, 200);\n\n        if (images.length === 0) {\n            // 如果没有图片，直接使用实际高度\n            updateHeight();\n            return;\n        }\n\n        let loadedImages = 0;\n        const totalImages = images.length;\n\n        const handleImageLoad = () => {\n            loadedImages++;\n            if (loadedImages === totalImages && itemRef.current) {\n                setIsLoaded(true);\n                updateHeight();\n            }\n        };\n\n        Array.from(images).forEach((img) => {\n            if (img.complete) {\n                handleImageLoad();\n            } else {\n                img.addEventListener('load', handleImageLoad);\n                img.addEventListener('error', handleImageLoad);\n            }\n        });\n\n        return () => {\n            if (timeoutRef.current) {\n                clearTimeout(timeoutRef.current);\n            }\n            Array.from(images).forEach((img) => {\n                img.removeEventListener('load', handleImageLoad);\n                img.removeEventListener('error', handleImageLoad);\n            });\n        };\n    }, [index, columnIndex, defaultItemHeight, updateHeight]);\n\n    return (\n        <div\n            ref={itemRef}\n            className=\"verney-waterfall-item\"\n            style={{\n                marginBottom: gutter,\n                opacity: isVisible ? 1 : 0,\n                transform: isVisible ? 'none' : 'translateY(20px)',\n                transition: enableAnimation\n                    ? `opacity ${animationDuration}ms ${animationEasing}, transform ${animationDuration}ms ${animationEasing}`\n                    : 'none',\n            }}\n        >\n            {renderItem?.(item, index)}\n        </div>\n    );\n});\n"],"names":["useRef","useState","useCallback","useEffect","useInView","jsx","jsxs","React"],"mappings":"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"}