{"version":3,"file":"input.js","sources":["../../../../src/components/input/input.tsx"],"sourcesContent":["import classNames from 'classnames';\nimport React, { forwardRef } from 'react';\nimport './style.scss';\n\nexport interface InputProps\n    extends Omit<\n        React.InputHTMLAttributes<HTMLInputElement>,\n        'size' | 'prefix' | 'suffix'\n    > {\n    /**\n     * 输入框大小\n     */\n    size?: 'small' | 'middle' | 'large';\n    /**\n     * 是否禁用\n     */\n    disabled?: boolean;\n    /**\n     * 输入框状态\n     */\n    status?: 'error' | 'warning';\n    /**\n     * 是否显示边框\n     */\n    bordered?: boolean;\n    /**\n     * 前缀图标\n     */\n    prefix?: React.ReactNode;\n    /**\n     * 后缀图标\n     */\n    suffix?: React.ReactNode;\n    /**\n     * 允许清除内容\n     */\n    allowClear?: boolean;\n}\n\nexport const Input = forwardRef<HTMLInputElement, InputProps>((props, ref) => {\n    const {\n        className,\n        size = 'middle',\n        disabled = false,\n        status,\n        bordered = true,\n        prefix,\n        suffix,\n        allowClear,\n        ...rest\n    } = props;\n\n    const inputClassName = classNames(\n        'verney-input',\n        {\n            [`verney-input-${size}`]: size,\n            'verney-input-disabled': disabled,\n            [`verney-input-${status}`]: status,\n            'verney-input-borderless': !bordered,\n        },\n        className\n    );\n\n    return (\n        <div className=\"verney-input-wrapper\">\n            {prefix && <span className=\"verney-input-prefix\">{prefix}</span>}\n            <input\n                ref={ref}\n                className={inputClassName}\n                disabled={disabled}\n                {...rest}\n            />\n            {(suffix || allowClear) && (\n                <span className=\"verney-input-suffix\">\n                    {allowClear && rest.value && (\n                        <button\n                            type=\"button\"\n                            className=\"verney-input-clear-icon\"\n                            onClick={() => {\n                                if (rest.onChange) {\n                                    const e = new Event('input', {\n                                        bubbles: true,\n                                    }) as any;\n                                    e.target = { value: '' };\n                                    rest.onChange(e);\n                                }\n                            }}\n                        >\n                            ×\n                        </button>\n                    )}\n                    {suffix}\n                </span>\n            )}\n        </div>\n    );\n});\n\nInput.displayName = 'Input';\n"],"names":["forwardRef","jsxs","jsx"],"mappings":";;;;;;AAuCO,MAAM,QAAQA,WAAA,WAAyC,CAAC,OAAO,QAAQ;AACpE,QAAA;AAAA,IACF;AAAA,IACA,OAAO;AAAA,IACP,WAAW;AAAA,IACX;AAAA,IACA,WAAW;AAAA,IACX;AAAA,IACA;AAAA,IACA;AAAA,IACA,GAAG;AAAA,EAAA,IACH;AAEJ,QAAM,iBAAiB;AAAA,IACnB;AAAA,IACA;AAAA,MACI,CAAC,gBAAgB,IAAI,EAAE,GAAG;AAAA,MAC1B,yBAAyB;AAAA,MACzB,CAAC,gBAAgB,MAAM,EAAE,GAAG;AAAA,MAC5B,2BAA2B,CAAC;AAAA,IAChC;AAAA,IACA;AAAA,EACJ;AAGI,SAAAC,2BAAA,kBAAA,KAAC,OAAI,EAAA,WAAU,wBACV,UAAA;AAAA,IAAA,UAAWC,2BAAA,kBAAA,IAAA,QAAA,EAAK,WAAU,uBAAuB,UAAO,QAAA;AAAA,IACzDA,2BAAA,kBAAA;AAAA,MAAC;AAAA,MAAA;AAAA,QACG;AAAA,QACA,WAAW;AAAA,QACX;AAAA,QACC,GAAG;AAAA,MAAA;AAAA,IACR;AAAA,KACE,UAAU,eACPD,2BAAA,kBAAA,KAAA,QAAA,EAAK,WAAU,uBACX,UAAA;AAAA,MAAA,cAAc,KAAK,SAChBC,2BAAA,kBAAA;AAAA,QAAC;AAAA,QAAA;AAAA,UACG,MAAK;AAAA,UACL,WAAU;AAAA,UACV,SAAS,MAAM;AACX,gBAAI,KAAK,UAAU;AACT,oBAAA,IAAI,IAAI,MAAM,SAAS;AAAA,gBACzB,SAAS;AAAA,cAAA,CACZ;AACC,gBAAA,SAAS,EAAE,OAAO,GAAG;AACvB,mBAAK,SAAS,CAAC;AAAA,YAAA;AAAA,UAEvB;AAAA,UACH,UAAA;AAAA,QAAA;AAAA,MAED;AAAA,MAEH;AAAA,IAAA,EACL,CAAA;AAAA,EAAA,GAER;AAER,CAAC;AAED,MAAM,cAAc;;"}